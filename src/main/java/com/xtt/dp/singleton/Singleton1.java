package com.xtt.dp.singleton;

/**
 * 单例设计模式-饿汉式
 *
 * What:设计模式是一套被反复使用的、大多数人知晓的、分类编目的 代码设计经验总结。
 *      使用设计模式可以提高代码可重用性、可扩展性、可读性和可靠性。
 *      单例模式是一种常用的设计模式。
 *      例如：许多时候整个系统只需要拥有一个的全局对象，这样有利于我们协调系统整体的行为。
 *      Windows任务管理、mac的活动监视器；
 *      比如在某个服务器程序中，该服务器的配置信息存放在一个文件中，这些配置数据由一个单例对象统一读取，
 *      然后服务进程中的其他对象再通过这个单例对象获取这些配置信息。这种方式简化了在复杂环境下的配置管理。
 *
 * Why:在实际开发中，我们经常遇到这样的情况，为了节约系统资源，有时需要确保系统中某个类只有唯一一个实例，
 *      当这个唯一实例创建成功之后，我们无法再创建一个同类型的其他对象，所有的操作都只能基于这个唯一实例。
 *      为了确保对象的唯一性，我们可以通过单例模式来实现，这就是单例模式的动机所在。
 *
 * How:1、私有化该类的构造函数；2、通过new在本类中创建一个本类对象；3、定义一个公有的方法，将在该类中所创建的对象返回。
 *
 * 单例模式写法大的方面可以分为五种：1、饿汉式；2、懒汉式；3、双重校验锁；4、静态内部类；5、枚举。
 *
 *
 * Created by zhaoteng on 2017/7/17.
 */
public class Singleton1 {

    private static Singleton1 instance = new Singleton1();

    //构造函数
    private Singleton1(){}

    public static Singleton1 getInstance(){
        return instance;
    }

    /**
     * 优点：实现简单，在类加载的时候就完成了实例化，避免了线程的同步问题。
     * 缺点：可能没有用到这个实例，但是它也会实例化，会造成内存的浪费
     * (但是这个浪费可以忽略，所以这种方式也是推荐使用的)
     *
     * 可用
     */

}